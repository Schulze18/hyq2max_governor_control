#include "hyq2max_governor_control/hyq2max_jacobian_functions.h"
#include <Eigen/Dense>
#include <iostream>


void updateCoMJacobian(Eigen::Matrix<double,12,1> *q, Eigen::Matrix<double,3,3> *J_CoM_LF, Eigen::Matrix<double,3,3> *J_CoM_RF, Eigen::Matrix<double,3,3> *J_CoM_LH, Eigen::Matrix<double,3,3> *J_CoM_RH){
    (*J_CoM_LF)(1,0) = (0.605e-3 * cos((*q)(1,0)) - 0.1346e-2 * sin((*q)(1,0)));
    (*J_CoM_LF)(1,1) = c1;
     std::cout << (*J_CoM_LF) << std::endl << std::endl;
}


void updateJacobian(Eigen::Matrix<double,12,1> *q, Eigen::Matrix<double,3,3> *J_foot_LF, Eigen::Matrix<double,3,3> *J_foot_RF, Eigen::Matrix<double,3,3> *J_foot_LH, Eigen::Matrix<double,3,3> *J_foot_RH){
    // Jacobian from Left Front Foot
    //(*J_foot_LF)(0,1) = -1;
    (*J_foot_LF)(0,0) = 0;
    (*J_foot_LF)(0,1) = (-c101 * cos((*q)(1,0) + (*q)(2,0)) - c102 * cos((*q)(1,0)));
    (*J_foot_LF)(0,2) = -(c101 * cos((*q)(1,0) + (*q)(2,0)));
    (*J_foot_LF)(1,0) = (-c103 * cos((*q)(0,0) - (*q)(1,0) - (*q)(2,0)) - c103 * cos((*q)(0,0) + (*q)(1,0) + (*q)(2,0)) - c104 * cos((*q)(0,0) - (*q)(1,0)) - c104 * cos((*q)(0,0) + (*q)(1,0)) - c105 * sin((*q)(0,0)));
    (*J_foot_LF)(1,1) = (c103 * cos((*q)(0,0) - (*q)(1,0) - (*q)(2,0)) - c103 * cos((*q)(0,0) + (*q)(1,0) + (*q)(2,0)) + c104 * cos((*q)(0,0) - (*q)(1,0)) - c104 * cos((*q)(0,0) + (*q)(1,0)));
    (*J_foot_LF)(1,2) = (-c103 * cos((*q)(0,0) + (*q)(1,0) + (*q)(2,0)) + c103 * cos((*q)(0,0) - (*q)(1,0) - (*q)(2,0)));
    (*J_foot_LF)(2,0) = (c103 * sin((*q)(0,0) + (*q)(1,0) + (*q)(2,0)) + c103 * sin((*q)(0,0) - (*q)(1,0) - (*q)(2,0)) + c104 * sin((*q)(0,0) + (*q)(1,0)) + c104 * sin((*q)(0,0) - (*q)(1,0)) - c105 * cos((*q)(0,0)));
    (*J_foot_LF)(2,1) = (c103 * sin((*q)(0,0) + (*q)(1,0) + (*q)(2,0)) - c103 * sin((*q)(0,0) - (*q)(1,0) - (*q)(2,0)) + c104 * sin((*q)(0,0) + (*q)(1,0)) - c104 * sin((*q)(0,0) - (*q)(1,0)));
    (*J_foot_LF)(2,2) = (-c103 * sin((*q)(0,0) - (*q)(1,0) - (*q)(2,0)) + c103 * sin((*q)(0,0) + (*q)(1,0) + (*q)(2,0)));

    // Jacobian from Right Front Foot
    (*J_foot_RF)(0,0) = 0;
    (*J_foot_RF)(0,1) = (-c101 * cos((*q)(4,0) + (*q)(5,0)) - c102 * cos((*q)(4,0)));
    (*J_foot_RF)(0,2) = -(c101 * cos((*q)(4,0) + (*q)(5,0)));
    (*J_foot_RF)(1,0) = (c103 * cos((*q)(3,0) - (*q)(4,0) - (*q)(5,0)) + c103 * cos((*q)(3,0) + (*q)(4,0) + (*q)(5,0)) + c104 * cos((*q)(3,0) - (*q)(4,0)) + c104 * cos((*q)(3,0) + (*q)(4,0)) + c105 * sin((*q)(3,0)));
    (*J_foot_RF)(1,1) = (-c103 * cos((*q)(3,0) - (*q)(4,0) - (*q)(5,0)) + c103 * cos((*q)(3,0) + (*q)(4,0) + (*q)(5,0)) - c104 * cos((*q)(3,0) - (*q)(4,0)) + c104 * cos((*q)(3,0) + (*q)(4,0)));
    (*J_foot_RF)(1,2) = (c103 * cos((*q)(3,0) + (*q)(4,0) + (*q)(5,0)) - c103 * cos((*q)(3,0) - (*q)(4,0) - (*q)(5,0)));
    (*J_foot_RF)(2,0) = (c103 * sin((*q)(3,0) + (*q)(4,0) + (*q)(5,0)) + c103 * sin((*q)(3,0) - (*q)(4,0) - (*q)(5,0)) + c104 * sin((*q)(3,0) + (*q)(4,0)) + c104 * sin((*q)(3,0) - (*q)(4,0)) - c105 * cos((*q)(3,0)));
    (*J_foot_RF)(2,1) = (c103 * sin((*q)(3,0) + (*q)(4,0) + (*q)(5,0)) - c103 * sin((*q)(3,0) - (*q)(4,0) - (*q)(5,0)) + c104 * sin((*q)(3,0) + (*q)(4,0)) - c104 * sin((*q)(3,0) - (*q)(4,0)));
    (*J_foot_RF)(2,2) = (-c103 * sin((*q)(3,0) - (*q)(4,0) - (*q)(5,0)) + c103 * sin((*q)(3,0) + (*q)(4,0) + (*q)(5,0)));
    
    // Jacobian from Left Hind Foot
    (*J_foot_LH)(0,0) = 0;
    (*J_foot_LH)(0,1) = (-c101 * cos((*q)(7,0) + (*q)(8,0)) - c102 * cos((*q)(7,0)));
    (*J_foot_LH)(0,2) = -(c101 * cos((*q)(7,0) + (*q)(8,0)));
    (*J_foot_LH)(1,0) = (-c103 * cos((*q)(6,0) - (*q)(7,0) - (*q)(8,0)) - c103 * cos((*q)(6,0) + (*q)(7,0) + (*q)(8,0)) - c104 * cos((*q)(6,0) - (*q)(7,0)) - c104 * cos((*q)(6,0) + (*q)(7,0)) - c105 * sin((*q)(6,0)));
    (*J_foot_LH)(1,1) = (c103 * cos((*q)(6,0) - (*q)(7,0) - (*q)(8,0)) - c103 * cos((*q)(6,0) + (*q)(7,0) + (*q)(8,0)) + c104 * cos((*q)(6,0) - (*q)(7,0)) - c104 * cos((*q)(6,0) + (*q)(7,0)));
    (*J_foot_LH)(1,2) = (-c103 * cos((*q)(6,0) + (*q)(7,0) + (*q)(8,0)) + c103 * cos((*q)(6,0) - (*q)(7,0) - (*q)(8,0)));
    (*J_foot_LH)(2,0) = (c103 * sin((*q)(6,0) + (*q)(7,0) + (*q)(8,0)) + c103 * sin((*q)(6,0) - (*q)(7,0) - (*q)(8,0)) + c104 * sin((*q)(6,0) + (*q)(7,0)) + c104 * sin((*q)(6,0) - (*q)(7,0)) - c105 * cos((*q)(6,0)));
    (*J_foot_LH)(2,1) = (c103 * sin((*q)(6,0) + (*q)(7,0) + (*q)(8,0)) - c103 * sin((*q)(6,0) - (*q)(7,0) - (*q)(8,0)) + c104 * sin((*q)(6,0) + (*q)(7,0)) - c104 * sin((*q)(6,0) - (*q)(7,0)));
    (*J_foot_LH)(2,2) = (-c103 * sin((*q)(6,0) - (*q)(7,0) - (*q)(8,0)) + c103 * sin((*q)(6,0) + (*q)(7,0) + (*q)(8,0)));

    // Jacobian from Right Hind Foot
    (*J_foot_RH)(0,0) = 0;
    (*J_foot_RH)(0,1) = (-c101 * cos((*q)(10,0) + (*q)(11,0)) - c102 * cos((*q)(10,0)));
    (*J_foot_RH)(0,2) = -(c101 * cos((*q)(10,0) + (*q)(11,0)));
    (*J_foot_RH)(1,0) = (c103 * cos((*q)(9,0) - (*q)(10,0) - (*q)(11,0)) + c103 * cos((*q)(9,0) + (*q)(10,0) + (*q)(11,0)) + c104 * cos((*q)(9,0) - (*q)(10,0)) + c104 * cos((*q)(9,0) + (*q)(10,0)) + c105 * sin((*q)(9,0)));
    (*J_foot_RH)(1,1) = (-c103 * cos((*q)(9,0) - (*q)(10,0) - (*q)(11,0)) + c103 * cos((*q)(9,0) + (*q)(10,0) + (*q)(11,0)) - c104 * cos((*q)(9,0) - (*q)(10,0)) + c104 * cos((*q)(9,0) + (*q)(10,0)));
    (*J_foot_RH)(1,2) = (c103 * cos((*q)(9,0) + (*q)(10,0) + (*q)(11,0)) - c103 * cos((*q)(9,0) - (*q)(10,0) - (*q)(11,0)));
    (*J_foot_RH)(2,0) = (c103 * sin((*q)(9,0) + (*q)(10,0) + (*q)(11,0)) + c103 * sin((*q)(9,0) - (*q)(10,0) - (*q)(11,0)) + c104 * sin((*q)(9,0) + (*q)(10,0)) + c104 * sin((*q)(9,0) - (*q)(10,0)) - c105 * cos((*q)(9,0)));
    (*J_foot_RH)(2,1) = (c103 * sin((*q)(9,0) + (*q)(10,0) + (*q)(11,0)) - c103 * sin((*q)(9,0) - (*q)(10,0) - (*q)(11,0)) + c104 * sin((*q)(9,0) + (*q)(10,0)) - c104 * sin((*q)(9,0) - (*q)(10,0)));
    (*J_foot_RH)(2,2) = (-c103 * sin((*q)(9,0) - (*q)(10,0) - (*q)(11,0)) + c103 * sin((*q)(9,0) + (*q)(10,0) + (*q)(11,0)));

    std::cout << (*J_foot_LF) << std::endl << std::endl;
    std::cout << (*J_foot_RF) << std::endl << std::endl;
    std::cout << (*J_foot_LH) << std::endl << std::endl;
    std::cout << (*J_foot_RH) << std::endl << std::endl;

}